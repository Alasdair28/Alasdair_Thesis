// Generated by gencpp from file wam_msgs/tactilePressure.msg
// DO NOT EDIT!


#ifndef WAM_MSGS_MESSAGE_TACTILEPRESSURE_H
#define WAM_MSGS_MESSAGE_TACTILEPRESSURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wam_msgs
{
template <class ContainerAllocator>
struct tactilePressure_
{
  typedef tactilePressure_<ContainerAllocator> Type;

  tactilePressure_()
    : pressure()
    , normalizedPressure()  {
    }
  tactilePressure_(const ContainerAllocator& _alloc)
    : pressure(_alloc)
    , normalizedPressure(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _pressure_type;
  _pressure_type pressure;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _normalizedPressure_type;
  _normalizedPressure_type normalizedPressure;





  typedef boost::shared_ptr< ::wam_msgs::tactilePressure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::tactilePressure_<ContainerAllocator> const> ConstPtr;

}; // struct tactilePressure_

typedef ::wam_msgs::tactilePressure_<std::allocator<void> > tactilePressure;

typedef boost::shared_ptr< ::wam_msgs::tactilePressure > tactilePressurePtr;
typedef boost::shared_ptr< ::wam_msgs::tactilePressure const> tactilePressureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_msgs::tactilePressure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_msgs::tactilePressure_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wam_msgs::tactilePressure_<ContainerAllocator1> & lhs, const ::wam_msgs::tactilePressure_<ContainerAllocator2> & rhs)
{
  return lhs.pressure == rhs.pressure &&
    lhs.normalizedPressure == rhs.normalizedPressure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wam_msgs::tactilePressure_<ContainerAllocator1> & lhs, const ::wam_msgs::tactilePressure_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::tactilePressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::tactilePressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::tactilePressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::tactilePressure_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::tactilePressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::tactilePressure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::tactilePressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95d177f5372d97e1d1daa60d6bafe357";
  }

  static const char* value(const ::wam_msgs::tactilePressure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95d177f5372d97e1ULL;
  static const uint64_t static_value2 = 0xd1daa60d6bafe357ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::tactilePressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_msgs/tactilePressure";
  }

  static const char* value(const ::wam_msgs::tactilePressure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::tactilePressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] pressure\n"
"int32[] normalizedPressure\n"
;
  }

  static const char* value(const ::wam_msgs::tactilePressure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_msgs::tactilePressure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pressure);
      stream.next(m.normalizedPressure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tactilePressure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::tactilePressure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_msgs::tactilePressure_<ContainerAllocator>& v)
  {
    s << indent << "pressure[]" << std::endl;
    for (size_t i = 0; i < v.pressure.size(); ++i)
    {
      s << indent << "  pressure[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pressure[i]);
    }
    s << indent << "normalizedPressure[]" << std::endl;
    for (size_t i = 0; i < v.normalizedPressure.size(); ++i)
    {
      s << indent << "  normalizedPressure[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.normalizedPressure[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_TACTILEPRESSURE_H
