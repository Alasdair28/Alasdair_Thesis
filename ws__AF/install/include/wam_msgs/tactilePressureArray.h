// Generated by gencpp from file wam_msgs/tactilePressureArray.msg
// DO NOT EDIT!


#ifndef WAM_MSGS_MESSAGE_TACTILEPRESSUREARRAY_H
#define WAM_MSGS_MESSAGE_TACTILEPRESSUREARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <wam_msgs/tactilePressure.h>

namespace wam_msgs
{
template <class ContainerAllocator>
struct tactilePressureArray_
{
  typedef tactilePressureArray_<ContainerAllocator> Type;

  tactilePressureArray_()
    : tactilePressures()  {
    }
  tactilePressureArray_(const ContainerAllocator& _alloc)
    : tactilePressures(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::wam_msgs::tactilePressure_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::wam_msgs::tactilePressure_<ContainerAllocator> >> _tactilePressures_type;
  _tactilePressures_type tactilePressures;





  typedef boost::shared_ptr< ::wam_msgs::tactilePressureArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::tactilePressureArray_<ContainerAllocator> const> ConstPtr;

}; // struct tactilePressureArray_

typedef ::wam_msgs::tactilePressureArray_<std::allocator<void> > tactilePressureArray;

typedef boost::shared_ptr< ::wam_msgs::tactilePressureArray > tactilePressureArrayPtr;
typedef boost::shared_ptr< ::wam_msgs::tactilePressureArray const> tactilePressureArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_msgs::tactilePressureArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wam_msgs::tactilePressureArray_<ContainerAllocator1> & lhs, const ::wam_msgs::tactilePressureArray_<ContainerAllocator2> & rhs)
{
  return lhs.tactilePressures == rhs.tactilePressures;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wam_msgs::tactilePressureArray_<ContainerAllocator1> & lhs, const ::wam_msgs::tactilePressureArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::tactilePressureArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::tactilePressureArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::tactilePressureArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80eca1e412dfc201a84073789556efac";
  }

  static const char* value(const ::wam_msgs::tactilePressureArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80eca1e412dfc201ULL;
  static const uint64_t static_value2 = 0xa84073789556efacULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_msgs/tactilePressureArray";
  }

  static const char* value(const ::wam_msgs::tactilePressureArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_msgs/tactilePressure[] tactilePressures\n"
"\n"
"================================================================================\n"
"MSG: wam_msgs/tactilePressure\n"
"float64[] pressure\n"
"int32[] normalizedPressure\n"
;
  }

  static const char* value(const ::wam_msgs::tactilePressureArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tactilePressures);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tactilePressureArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::tactilePressureArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_msgs::tactilePressureArray_<ContainerAllocator>& v)
  {
    s << indent << "tactilePressures[]" << std::endl;
    for (size_t i = 0; i < v.tactilePressures.size(); ++i)
    {
      s << indent << "  tactilePressures[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::wam_msgs::tactilePressure_<ContainerAllocator> >::stream(s, indent + "    ", v.tactilePressures[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_TACTILEPRESSUREARRAY_H
