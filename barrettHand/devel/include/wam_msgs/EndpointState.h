// Generated by gencpp from file wam_msgs/EndpointState.msg
// DO NOT EDIT!


#ifndef WAM_MSGS_MESSAGE_ENDPOINTSTATE_H
#define WAM_MSGS_MESSAGE_ENDPOINTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>

namespace wam_msgs
{
template <class ContainerAllocator>
struct EndpointState_
{
  typedef EndpointState_<ContainerAllocator> Type;

  EndpointState_()
    : orientation()
    , positions()
    , velocities()  {
    }
  EndpointState_(const ContainerAllocator& _alloc)
    : orientation(_alloc)
    , positions(_alloc)
    , velocities(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _positions_type;
  _positions_type positions;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _velocities_type;
  _velocities_type velocities;





  typedef boost::shared_ptr< ::wam_msgs::EndpointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::EndpointState_<ContainerAllocator> const> ConstPtr;

}; // struct EndpointState_

typedef ::wam_msgs::EndpointState_<std::allocator<void> > EndpointState;

typedef boost::shared_ptr< ::wam_msgs::EndpointState > EndpointStatePtr;
typedef boost::shared_ptr< ::wam_msgs::EndpointState const> EndpointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_msgs::EndpointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_msgs::EndpointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wam_msgs::EndpointState_<ContainerAllocator1> & lhs, const ::wam_msgs::EndpointState_<ContainerAllocator2> & rhs)
{
  return lhs.orientation == rhs.orientation &&
    lhs.positions == rhs.positions &&
    lhs.velocities == rhs.velocities;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wam_msgs::EndpointState_<ContainerAllocator1> & lhs, const ::wam_msgs::EndpointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::EndpointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::EndpointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::EndpointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::EndpointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::EndpointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::EndpointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::EndpointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dea8022bec7d7e6aafa92af7cef945d4";
  }

  static const char* value(const ::wam_msgs::EndpointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdea8022bec7d7e6aULL;
  static const uint64_t static_value2 = 0xafa92af7cef945d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::EndpointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_msgs/EndpointState";
  }

  static const char* value(const ::wam_msgs::EndpointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::EndpointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Quaternion  orientation\n"
"float32[]          positions\n"
"float32[]          velocities\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::wam_msgs::EndpointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_msgs::EndpointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orientation);
      stream.next(m.positions);
      stream.next(m.velocities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EndpointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::EndpointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_msgs::EndpointState_<ContainerAllocator>& v)
  {
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_ENDPOINTSTATE_H
